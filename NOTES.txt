Rule 1: When clicking on a link within a Turbo Frame, Turbo expects a frame of the same id on the target page. It will then replace the Frame's content on the source page with the Frame's content on the target page.

Rule 2: When clicking on a link within a Turbo Frame, if there is no Turbo Frame with the same id on the target page, the frame disappears, and the error Response has no matching <turbo-frame id="name_of_the_frame"> element is logged in the console.

Rules 3: A link can target another frame than the one it is directly nested in thanks to the data-turbo-frame data attribute.

There is a special frame called `_top` that represents the whole page. It's not really a Turbo Frame, but it behaves almost like one, so we will make this approximation for our mental model.


TURBO STREAM
Note: As of writing this chapter, the turbo_stream helper responds to the following methods, so that it can perform the following actions:

# Remove a Turbo Frame
turbo_stream.remove

# Insert a Turbo Frame at the beginning/end of a list
turbo_stream.append
turbo_stream.prepend

# Insert a Turbo Frame before/after another Turbo Frame
turbo_stream.before
turbo_stream.after

# Replace or update the content of a Turbo Frame
turbo_stream.update
turbo_stream.replace

When our user clicks on the "Cancel" link for the new quote form:

The link is within a Turbo Frame of id new_quote, so Turbo will only replace the content of this frame
The link navigates to the Quotes#index page that contains an empty Turbo Frame with id new_quote
Turbo replaces the content of the new_quote frame with the empty content, so the form disappears
When our user clicks on the "Cancel" link for the edit quote form:

The link is within a Turbo Frame of id dom_id(quote), so Turbo will only replace the content of this frame
The link navigates to the Quotes#index page that contains a Turbo Frame with id dom_id(quote) that contains the HTML for this quote
Turbo replaces the content of the dom_id(quote) Frame containing the form with the HTML for this quote

Wrap up

Transforming our application into a real-time one only took two lines of code, thanks to Turbo Rails.

In our Quote model, we set three callbacks to broadcast creations, updates, and deletions to the "quotes" stream. Thanks to the broadcasts_to method, those three callbacks can be defined in one line.
In our Quotes#index view, we explicitly mentioned that we want to subscribe to the changes that are broadcasted to the "quotes" stream.


DEVISE IN TESTS:
in test_helper.rb: (ActiveSupport::TestCase)
include Devise::Test::IntegrationHelpers
use helper for any tests requiring user:
sign_in users(:accountant)

CHANNEL SECURITY FOR ACTIONCABLE;
model:
broadcasts_to ->(quote) { [quote.company, "quotes"] }, inserts_by: :prepend
view:
<%= turbo_stream_from(current_company, "quotes") %>


Note: Now that we have more experience with Turbo Frames, let's discuss when to use a <turbo-frame> tag or a <div>.

We must use a Turbo Frame when we need Turbo to intercept clicks on links and form sumbissions for us. For example, the content of the line_items/_line_item.html.erb partial must be wrapped inside a Turbo Frame because when we click on the "Edit" button for a line item, we want Turbo to replace the content of this Turbo Frame with the form extracted from the LineItems#edit page. This feature wouldn't work with a simple div.

On the other hand, we don't need a Turbo Frame when we only target an id of the DOM in a Turbo Stream view. For example, we didn't use a Turbo Frame for flash messages. Instead, we used a div with an id of flash to prepend new messages. We could have used a div with the id of quotes on the Quotes#index page instead of a Turbo Frame, because the quotes id is only used in Turbo Stream views to prepend quotes to the list. It never serves to intercept clicks on links and form submissions.

My personal preference here is always to use Turbo Frame tags as it makes it obvious that the id is used somewhere in a Turbo Stream view. This is why we use Turbo Frames everywhere in this tutorial. However, it is perfectly fine if you disagree and prefer to use a div when you don't need a Turbo Frame.

