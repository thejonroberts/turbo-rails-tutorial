Rule 1: When clicking on a link within a Turbo Frame, Turbo expects a frame of the same id on the target page. It will then replace the Frame's content on the source page with the Frame's content on the target page.

Rule 2: When clicking on a link within a Turbo Frame, if there is no Turbo Frame with the same id on the target page, the frame disappears, and the error Response has no matching <turbo-frame id="name_of_the_frame"> element is logged in the console.

Rules 3: A link can target another frame than the one it is directly nested in thanks to the data-turbo-frame data attribute.

There is a special frame called `_top` that represents the whole page. It's not really a Turbo Frame, but it behaves almost like one, so we will make this approximation for our mental model.


TURBO STREAM
Note: As of writing this chapter, the turbo_stream helper responds to the following methods, so that it can perform the following actions:

# Remove a Turbo Frame
turbo_stream.remove

# Insert a Turbo Frame at the beginning/end of a list
turbo_stream.append
turbo_stream.prepend

# Insert a Turbo Frame before/after another Turbo Frame
turbo_stream.before
turbo_stream.after

# Replace or update the content of a Turbo Frame
turbo_stream.update
turbo_stream.replace

When our user clicks on the "Cancel" link for the new quote form:

The link is within a Turbo Frame of id new_quote, so Turbo will only replace the content of this frame
The link navigates to the Quotes#index page that contains an empty Turbo Frame with id new_quote
Turbo replaces the content of the new_quote frame with the empty content, so the form disappears
When our user clicks on the "Cancel" link for the edit quote form:

The link is within a Turbo Frame of id dom_id(quote), so Turbo will only replace the content of this frame
The link navigates to the Quotes#index page that contains a Turbo Frame with id dom_id(quote) that contains the HTML for this quote
Turbo replaces the content of the dom_id(quote) Frame containing the form with the HTML for this quote
